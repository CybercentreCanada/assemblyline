
name: build

trigger:
  tags:
    include: ["v*"]
pr: none

pool:
  vmImage: "ubuntu-20.04"

variables:
  TAG: ${{ replace(variables['Build.SourceBranch'], 'refs/tags/v', '') }}

resources:
  containers:
    - container: redis
      image: redis
      ports:
        - 6379:6379
    - container: sftp
      image: linuxserver/openssh-server
      env:
        SUDO_ACCESS: "false"
        PASSWORD_ACCESS: "true"
        USER_PASSWORD: "password"
        USER_NAME: "user"
        LOG_STDOUT: "true"
      ports:
        - 2222:2222
    - container: elasticsearch
      image: cccs/elasticsearch:8.10.2
      env:
        ES_JAVA_OPTS: "-Xms256m -Xmx512m"
        DISCOVERY_TYPE: "single-node"
        ELASTIC_PASSWORD: "devpass"
      ports:
        - 9200:9200
    - container: minio
      image: cccs/minio
      env:
        MINIO_ACCESS_KEY: al_storage_key
        MINIO_SECRET_KEY: Ch@ngeTh!sPa33w0rd
      ports:
        - 9000:9000
  repositories:
  - repository: BuildRepo
    type: github
    endpoint: github-repo-sa
    name: CybercentreCanada/assemblyline
    ref: '$(Build.SourceBranch)'
  - repository: DocsRepo
    type: github
    endpoint: github-repo-sa
    name: CybercentreCanada/assemblyline4_docs

stages:
  ### BUILDING ###
  # Build Python packages
  - template: templates/stages/build-python.yaml

  # Build/Test Frontend
  - template: templates/stages/build-test-frontend.yaml

  # Build Base
  - template: templates/stages/build-base.yaml

  # Build Core
  - template: templates/stages/build-container.yaml
    parameters:
      baseImage: assemblyline
      component: assemblyline-core
      dependsOn: ["build_base"]
      dockerFile: deployment/Dockerfile

  # Service Server
  - template: templates/stages/build-container.yaml
    parameters:
      baseImage: assemblyline-core
      component: assemblyline-service-server
      dependsOn: ["build_core"]
      dockerFile: docker/Dockerfile

  # Service Base
  - template: templates/stages/build-container.yaml
    parameters:
      baseImage: assemblyline
      component: assemblyline-v4-service
      dependsOn: ["build_base"]
      dockerFile: docker/Dockerfile
      imageName: assemblyline-v4-service-base


  # ResultSample Service
  - template: templates/stages/build-container.yaml
    parameters:
      baseImage: assemblyline-v4-service-base
      component: assemblyline-v4-service
      dependsOn: ["build_v4_service_base"]
      dockerFile: assemblyline_result_sample_service/Dockerfile
      imageName: assemblyline-service-resultsample

  # UI (API)
  - template: templates/stages/build-container.yaml
    parameters:
      baseImage: assemblyline
      component: assemblyline-ui
      dependsOn: ["build_base", "build_python"]
      dockerFile: docker/ui/Dockerfile
      imageName: assemblyline-ui

  # SocketIO
  - template: templates/stages/build-container.yaml
    parameters:
      baseImage: assemblyline
      component: assemblyline-ui
      dependsOn: ["build_base", "build_python"]
      dockerFile: docker/socketio/Dockerfile
      imageName: assemblyline-socketio

  # External Lookup: Assemblyline
  - template: templates/stages/build-container.yaml
    parameters:
      baseImage: assemblyline
      component: assemblyline-ui
      dependsOn: ["build_base", "build_python"]
      imageName: assemblyline-ui-plugin-lookup-assemblyline
      workingDirectory: $(Pipeline.Workspace)/working/assemblyline-ui/plugins/external_lookup/assemblyline_lookup

  # External Lookup: MalwareBazaar
  - template: templates/stages/build-container.yaml
    parameters:
      baseImage: assemblyline
      component: assemblyline-ui
      dependsOn: ["build_base", "build_python"]
      imageName: assemblyline-ui-plugin-lookup-malwarebazaar
      workingDirectory: $(Pipeline.Workspace)/working/assemblyline-ui/plugins/external_lookup/malware_bazaar

  # External Lookup: VirusTotal
  - template: templates/stages/build-container.yaml
    parameters:
      baseImage: assemblyline
      component: assemblyline-ui
      dependsOn: ["build_base", "build_python"]
      imageName: assemblyline-ui-plugin-lookup-virustotal
      workingDirectory: $(Pipeline.Workspace)/working/assemblyline-ui/plugins/external_lookup/virustotal


  ### TESTING ###
  - template: templates/stages/test-container.yaml
    parameters:
      imageName: assemblyline
      component: assemblyline-base
      dependsOn: [build_base]

  - template: templates/stages/test-container.yaml
    parameters:
      component: assemblyline-core
      dependsOn: [build_core]

  - template: templates/stages/test-ui.yaml

  - template: templates/stages/test-container.yaml
    parameters:
      component: assemblyline-service-server
      dependsOn: [build_service_server]
      additionalSteps:
        - script: |
            docker run -d --name server --network host --restart on-failure cccstemp.azurecr.io/assemblyline-service-server:$TAG

  - template: templates/stages/test-container.yaml
    parameters:
      imageName: assemblyline-v4-service-base
      component: assemblyline-v4-service
      dependsOn: [build_v4_service_base]

  ### PUBLISHING ###
  - stage: deploy
    displayName: Deploy
    dependsOn: [test_assemblyline, test_core, test_ui, build_frontend, test_service_server, test_v4_service_base]
    jobs:
    - job: deploy_python
      displayName: Deploy Python Packages
      dependsOn: []
      variables:
        - group: deployment-information
      steps:
        - checkout: none
        - download: current
          artifact: working
        - script: |
            set -exv  # Echo commands before they are run
            sudo env "PATH=$PATH" python -m pip install --no-cache-dir -U 'urllib3<2' twine
            ls dist
            twine upload --skip-existing dist/*
          workingDirectory: $(Pipeline.Workspace)/working/
          displayName: Deploy to PyPI
          retryCountOnTaskFailure: 3
          env:
            TWINE_USERNAME: $(twineUsername)
            TWINE_PASSWORD: $(twinePassword)
    - job: deploy_containers
      displayName: Deploy Docker Image
      dependsOn: []
      variables:
        - group: "Dockerhub README"
      strategy:
        matrix:
          Base:
            CONTAINER_NAME: assemblyline
            DIRECTORY: assemblyline-base
          Core:
            CONTAINER_NAME: assemblyline-core
          UI:
            CONTAINER_NAME: assemblyline-ui
          UI-plugin-lookup-assemblyline:
            CONTAINER_NAME: assemblyline-ui-plugin-lookup-assemblyline
          UI-plugin-lookup-malwarebazaar:
            CONTAINER_NAME: assemblyline-ui-plugin-lookup-malwarebazaar
          UI-plugin-lookup-virustotal:
            CONTAINER_NAME: assemblyline-ui-plugin-lookup-virustotal
          UI-frontend:
            CONTAINER_NAME: assemblyline-ui-frontend
          SocketIO:
            CONTAINER_NAME: assemblyline-socketio
          Service-Server:
            CONTAINER_NAME: assemblyline-service-server
          Service-Base:
            CONTAINER_NAME: assemblyline-v4-service-base
            DIRECTORY: assemblyline-v4-service
          Sample-Service:
            CONTAINER_NAME: assemblyline-service-resultsample
      steps:
        - checkout: none
        - task: Docker@2
          displayName: Login to docker hub
          inputs:
            command: login
            containerRegistry: dockerhub
        - task: Docker@2
          displayName: Login to github packages
          inputs:
            command: login
            containerRegistry: github-packages-sa
        - task: Docker@2
          displayName: Login to temp registry
          inputs:
            command: login
            containerRegistry: cccstemp
        - task: Docker@2
          displayName: Login to chimera
          inputs:
            command: login
            containerRegistry: CHIMERA-U-ACR2
        # Push to container registries
        - script: |
            set -exv  # Echo commands before they are run
            if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
            export VERSION=${TAG/stable}
            export VERSION=${VERSION/beta/b}
            export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

            export BUILT_AS=cccstemp.azurecr.io/${CONTAINER_NAME}:$TAG
            docker pull $BUILT_AS

            # Publish to public container registries
            for IMAGE in "cccs/" "docker.pkg.github.com/cybercentrecanada/assemblyline/"
            do
              docker tag $BUILT_AS ${IMAGE}${CONTAINER_NAME}:$TAG
              docker tag $BUILT_AS ${IMAGE}${CONTAINER_NAME}:$BUILD_TYPE
              docker tag $BUILT_AS ${IMAGE}${CONTAINER_NAME}:$SERIES
              docker push ${IMAGE}${CONTAINER_NAME} --all-tags
            done

            # Publish to private container registry (append labelling)
            docker build -t $BUILT_AS -<<EOF
            FROM $BUILT_AS
            LABEL classification=UNCLASSIFIED
            EOF

            IMAGE=uchimera.azurecr.io/cccs/
            docker tag $BUILT_AS ${IMAGE}${CONTAINER_NAME}:$TAG
            docker tag $BUILT_AS ${IMAGE}${CONTAINER_NAME}:$BUILD_TYPE
            docker tag $BUILT_AS ${IMAGE}${CONTAINER_NAME}:$SERIES
            docker push ${IMAGE}${CONTAINER_NAME} --all-tags

          displayName: Deploy base Docker Hub
          retryCountOnTaskFailure: 3

        # Publish image documentation to DockerHub
        - template: ../steps/publish-description.yaml
          parameters:
            dockerhub_repo: ${CONTAINER_NAME}
            github_repo: ${{ coalesce($DIRECTORY, $CONTAINER_NAME) }}


    - job: update_odm_docs
      displayName: "Update Assemblyline4 Documentation"
      steps:
        - download: current
          artifact: working
        - checkout: DocsRepo
          path: assemblyline4_docs
          persistCredentials: true
        - task: Docker@2
          displayName: Login to temp registry
          inputs:
            command: login
            containerRegistry: cccstemp
        - script: |
            set -exv  # Echo commands before they are run

            # Prepare output directory
            cp -rf $(Agent.BuildDirectory)/assemblyline4_docs .
            (cd assemblyline4_docs && git checkout master)
            chmod -R a+rw ./assemblyline4_docs

            # Generate documentation from script
            docker run -v $PWD/assemblyline4_docs:/tmp/assemblyline4_docs:rw \
                       -v $PWD/assemblyline-base:/tmp/assemblyline-base:ro \
                       -v $PWD/gen_docs.py:/tmp/gen_docs.py:ro \
                       -w /tmp \
                       cccstemp.azurecr.io/assemblyline:${TAG} \
                       /bin/bash -c 'pip install mkdocs-material==7.3.6 mkdocs-static-i18n && python gen_docs.py . "/assemblyline4_docs"'
            if [[ "$TAG" == *stable* ]]
            then
              # Commit documentation changes (if any) to Documentation repo
              cd assemblyline4_docs
              if [[ `git status --porcelain` ]]; then
                git add .
                git config --global user.email "assemblyline@cyber.gc.ca"
                git config --global user.name "Azure Pipeline"
                git commit -m "Pipeline: Release $TAG documentation"
                git push
              fi
            fi

          workingDirectory: $(Pipeline.Workspace)/working/
          displayName: "Run script to generate documentation and commit changes"
          retryCountOnTaskFailure: 3
