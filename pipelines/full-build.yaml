
name: build

trigger:
  tags:
    include: ["v*"]
pr: none

pool:
  vmImage: "ubuntu-20.04"

resources:
  containers:
    - container: redis
      image: redis
      ports:
        - 6379:6379
    - container: elasticsearch
      image: cccs/elasticsearch:7.17.4
      env:
        ES_JAVA_OPTS: "-Xms256m -Xmx512m"
        DISCOVERY_TYPE: "single-node"
        ELASTIC_PASSWORD: "devpass"
      ports:
        - 9200:9200
    - container: minio
      image: cccs/minio
      env:
        MINIO_ACCESS_KEY: al_storage_key
        MINIO_SECRET_KEY: Ch@ngeTh!sPa33w0rd
      ports:
        - 9000:9000
  repositories:
  - repository: BuildRepo
    type: github
    endpoint: github-repo-sa
    name: CybercentreCanada/assemblyline
    ref: '$(Build.SourceBranch)'
  - repository: DocsRepo
    type: github
    endpoint: github-repo-sa
    name: CybercentreCanada/assemblyline4_docs

stages:
  - stage: build
    displayName: Build and Test
    jobs:
      - job: build_python
        displayName: Build Python Packages
        steps:
          - checkout: BuildRepo
            submodules: recursive
            persistCredentials: true
          - task: UsePythonVersion@0
            displayName: Set python version
            inputs:
              versionSpec: 3.9
          - script: |
              set -x  # Echo commands before they are run

              # Figure out what the build kind is
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/"}
              export VERSION=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$VERSION" == *stable* ]];
              then
                export BRANCH=master;
              elif [[ "$VERSION" == *dev* ]];
              then
                export BRANCH=dev;
              else
                exit 1;
              fi

              echo "Building $VERSION On branch $BRANCH"
              export VERSION=${VERSION/stable}
              export VERSION=${VERSION/beta/b}

              # make sure we are on the right branches for all other repos
              git config --global http.extraheader "`git config --get http.https://github.com/CybercentreCanada/assemblyline.extraheader`"
              git submodule foreach git checkout -B $BRANCH --track origin/$BRANCH
              git submodule foreach git pull
              git submodule foreach git tag ${TAG}
              git submodule foreach git push origin ${TAG}
              sudo env "PATH=$PATH" python -m pip install --no-cache-dir -U wheel cython pip

              # Build base
              cd assemblyline-base
              echo $VERSION > assemblyline/VERSION
              python setup.py sdist --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              # Build core
              cd ../assemblyline-core
              echo $VERSION > assemblyline_core/VERSION
              python setup.py sdist --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              # Build ui
              cd ../assemblyline-ui
              echo $VERSION > assemblyline_ui/VERSION
              python setup.py bdist_wheel --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              # Build service server
              cd ../assemblyline-service-server
              echo $VERSION > assemblyline_service_server/VERSION
              python setup.py bdist_wheel --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              cd ../assemblyline-service-client
              echo $VERSION > assemblyline_service_client/VERSION
              python setup.py bdist_wheel --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              cd ../assemblyline-v4-service
              echo $VERSION > assemblyline_v4_service/VERSION
              python setup.py bdist_wheel --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              wait
              cd ../
              ls dist
            displayName: Build Python Packages
          - publish: $(System.DefaultWorkingDirectory)
            artifact: working

      - job: test_frontend
        dependsOn: build_python
        timeoutInMinutes: 10
        displayName: Test Frontend Code
        env:
          CI: "true"
        steps:
          - checkout: none
          - download: current
            artifact: working
          - script: |
              set -xv  # Echo commands before they are run
              npm test

            workingDirectory: $(Pipeline.Workspace)/working/assemblyline-ui-frontend/
            displayName: Test Frontend

      - job: build_frontend
        dependsOn: test_frontend
        displayName: Build Frontend Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              export IMAGE=cccstemp.azurecr.io/assemblyline-ui-frontend
              docker build --build-arg version=$VERSION -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES .
              docker push $IMAGE -q --all-tags
            workingDirectory: $(Pipeline.Workspace)/working/assemblyline-ui-frontend/
            displayName: Build Frontend

      - job: build_base
        dependsOn: build_python
        displayName: Build Base Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              cd assemblyline-base
              mv ../dist/ dist

              docker pull cccstemp.azurecr.io/assemblyline-root-build:$BUILD_TYPE &
              docker pull cccstemp.azurecr.io/assemblyline-root:$BUILD_TYPE &
              wait

              set +xv
              export IMAGE=cccstemp.azurecr.io/assemblyline
              # docker build --build-arg version=$VERSION -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES . | while read line ; do echo "$(date) | $line"; done;
              docker build --build-arg version=$VERSION \
                           --build-arg version_tag=$TAG \
                           --build-arg build_image=cccstemp.azurecr.io/assemblyline-root-build:$BUILD_TYPE \
                           --build-arg base=cccstemp.azurecr.io/assemblyline-root \
                           --build-arg tag=$BUILD_TYPE \
                           -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES . -f incremental.Dockerfile | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Build Base

      - job: build_core
        dependsOn: build_base
        displayName: Build Core Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              cd assemblyline-core
              mv ../dist/ dist

              export BASE=cccstemp.azurecr.io/assemblyline
              export IMAGE=cccstemp.azurecr.io/assemblyline-core
              docker build --build-arg base=$BASE \
                           --build-arg version=$VERSION \
                           --build-arg branch=$BUILD_TYPE \
                           -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES . -f deployment/Dockerfile
              docker push $IMAGE -q --all-tags
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Build Core

      - job: build_service_server
        dependsOn: build_core
        displayName: Build Service Server Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              cd assemblyline-service-server
              mv ../dist/ dist

              export BASE=cccstemp.azurecr.io/assemblyline-core
              export IMAGE=cccstemp.azurecr.io/assemblyline-service-server
              docker build --build-arg base=$BASE \
                           --build-arg version=$VERSION \
                           --build-arg branch=$BUILD_TYPE \
                           -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES . -f docker/Dockerfile
              docker push $IMAGE -q --all-tags
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Build Core

      - job: build_service_base
        dependsOn: build_base
        displayName: Build Service Base Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              cd assemblyline-v4-service
              mv ../dist/ dist

              set +xv

              export BASE=cccstemp.azurecr.io/assemblyline
              export IMAGE=cccstemp.azurecr.io/assemblyline-v4-service-base
              docker build --build-arg base=$BASE \
                           --build-arg version=$VERSION \
                           --build-arg branch=$BUILD_TYPE -t $IMAGE:$TAG -t $IMAGE:$SERIES -t $IMAGE:$BUILD_TYPE . -f docker/Dockerfile | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags

              export BASE=$IMAGE
              export IMAGE=cccstemp.azurecr.io/assemblyline-service-resultsample
              docker build --build-arg base=$BASE \
                           --build-arg version=$VERSION \
                           --build-arg branch=$BUILD_TYPE -t $IMAGE:$TAG -t $IMAGE:$SERIES -t $IMAGE:$BUILD_TYPE . -f assemblyline_result_sample_service/Dockerfile | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags

            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Build Service Base

      - job: build_ui
        dependsOn: ["build_base", "build_python"]
        displayName: Build UI Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              cd assemblyline-ui
              mv ../dist/ dist

              export BASE=cccstemp.azurecr.io/assemblyline

              set +xv
              export IMAGE=cccstemp.azurecr.io/assemblyline-ui
              docker build --build-arg base=$BASE --build-arg version=$VERSION --build-arg branch=$BUILD_TYPE -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES . -f docker/ui/Dockerfile | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags

              export IMAGE=cccstemp.azurecr.io/assemblyline-socketio
              docker build --build-arg base=$BASE --build-arg version=$VERSION --build-arg branch=$BUILD_TYPE -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES . -f docker/socketio/Dockerfile | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags

              cd plugins/external_lookup
              export IMAGE=cccstemp.azurecr.io/assemblyline-ui-plugin-lookup-assemblyline
              docker build --build-arg base=$BASE --build-arg version=$VERSION -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES ./assemblyline_lookup/. | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags

              export IMAGE=cccstemp.azurecr.io/assemblyline-ui-plugin-lookup-malwarebazaar
              docker build --build-arg base=$BASE --build-arg version=$VERSION -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES ./malware_bazaar/. | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags

              export IMAGE=cccstemp.azurecr.io/assemblyline-ui-plugin-lookup-virustotal
              docker build --build-arg base=$BASE --build-arg version=$VERSION -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES ./virustotal/. | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Build UI

      - job: test_base
        dependsOn: build_base
        displayName: Test Base Image
        timeoutInMinutes: 10
        services:
          elasticsearch: elasticsearch
          redis: redis
          minio: minio
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}

              cd assemblyline-base

              docker run -v `pwd`/test:/test \
                         -v $(Pipeline.Workspace)/working/pipelines/base-config.yaml:/etc/assemblyline/config.yml \
                         -w /test \
                         --network host \
                         cccstemp.azurecr.io/assemblyline:${TAG} \
                         /bin/bash -c "pip install -r requirements.txt; CI=1 pytest -rsx --durations=10"
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Test Base

      - job: test_core
        dependsOn: build_core
        timeoutInMinutes: 10
        services:
          elasticsearch: elasticsearch
          redis: redis
        displayName: Test Core Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}

              cd assemblyline-core

              docker run -v `pwd`/test:/test \
                         -v $(Pipeline.Workspace)/working/pipelines/base-config.yaml:/etc/assemblyline/config.yml \
                         -w /test \
                         --network host \
                         cccstemp.azurecr.io/assemblyline-core:${TAG} /bin/bash -c "pip install -r requirements.txt; CI=1 pytest -rsx --durations=10"
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Test Core

      - job: test_ui
        dependsOn: ["build_ui", "build_frontend"]
        timeoutInMinutes: 10
        services:
          elasticsearch: elasticsearch
          redis: redis
          minio: minio
        displayName: Test UI Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}

              docker run -d --name ui --network host -v $(Pipeline.Workspace)/working/pipelines/ui-config.yaml:/etc/assemblyline/config.yml -v $(Pipeline.Workspace)/working/pipelines/classification.yaml:/etc/assemblyline/classification.yml --restart on-failure cccstemp.azurecr.io/assemblyline-ui:$TAG &
              docker run -d --name socketsrv --network host -v $(Pipeline.Workspace)/working/pipelines/ui-config.yaml:/etc/assemblyline/config.yml -v $(Pipeline.Workspace)/working/pipelines/classification.yaml:/etc/assemblyline/classification.yml --restart on-failure cccstemp.azurecr.io/assemblyline-socketio:$TAG &
              docker run -d --name frontend --network host --restart on-failure cccstemp.azurecr.io/assemblyline-ui-frontend:$TAG &
              docker run -d --name nginx --network host --restart on-failure -e "FRONTEND_HOST=127.0.0.1" -e "UI_HOST=127.0.0.1" -e "SOCKET_HOST=127.0.0.1" -e "TEMPLATE=minimal" -e "FQDN=localhost" -e "ACCESS_LOG=/dev/stdout" -e "ERROR_LEVEL=info" cccs/nginx-ssl-frontend &
              wait

              wget http://localhost:5000/healthz/ready --timeout=2 --retry-on-http-error=502 --retry-on-http-error=503 --waitretry=10 --retry-connrefused
              wget http://localhost:5002/healthz/ready --timeout=2 --retry-on-http-error=502 --retry-on-http-error=503 --waitretry=10 --retry-connrefused
              wget https://localhost --no-check-certificate --timeout=2 --retry-on-http-error=502 --waitretry=10 --retry-connrefused

              docker run -v `pwd`/test:/test \
                         -v $(Pipeline.Workspace)/working/pipelines/ui-config.yaml:/etc/assemblyline/config.yml \
                         -v $(Pipeline.Workspace)/working/pipelines/classification.yaml:/etc/assemblyline/classification.yml \
                         -w /test \
                         --network host \
                         cccstemp.azurecr.io/assemblyline-socketio:${TAG} \
                         /bin/bash -c "pip install -r requirements.txt; CI=1 pytest -rsx --durations=10"
            workingDirectory: $(Pipeline.Workspace)/working/assemblyline-ui
            displayName: Test UI
          - script: docker logs ui
            condition: failed()
            displayName: UI Logs
          - script: docker logs socketsrv
            condition: failed()
            displayName: SocketIO Logs
          - script: docker logs frontend
            condition: failed()
            displayName: Frontend Logs
          - script: docker logs nginx
            condition: failed()
            displayName: NGINX Logs

      - job: test_service_server
        dependsOn: build_service_server
        timeoutInMinutes: 10
        services:
          elasticsearch: elasticsearch
          redis: redis
          minio: minio
        displayName: Test Service Server Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}

              docker run -d --name server --network host --restart on-failure cccstemp.azurecr.io/assemblyline-service-server:$TAG

              docker run -v `pwd`/test:/test \
                         -v $(Pipeline.Workspace)/working/pipelines/base-config.yaml:/etc/assemblyline/config.yml \
                         -w /test \
                         --network host \
                         cccstemp.azurecr.io/assemblyline-service-server:${TAG} \
                         /bin/bash -c "pip install -r requirements.txt; CI=1 pytest -rsx --durations=10"
            workingDirectory: $(Pipeline.Workspace)/working/assemblyline-service-server
            displayName: Test Service Server

      - job: test_service_base
        dependsOn: build_service_base
        timeoutInMinutes: 10
        services:
          elasticsearch: elasticsearch
          redis: redis
          minio: minio
        displayName: Test Service Base Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}

              docker run -v `pwd`/test:/test \
                         -v $(Pipeline.Workspace)/working/pipelines/base-config.yaml:/etc/assemblyline/config.yml \
                         -w /test \
                         cccstemp.azurecr.io/assemblyline-v4-service-base:${TAG} \
                         /bin/bash -c "pip install -r requirements.txt; CI=1 pytest -rsx --durations=10"
            workingDirectory: $(Pipeline.Workspace)/working/assemblyline-v4-service
            displayName: Test Service Server

  - stage: deploy
    displayName: Deploy
    jobs:
    - job: deploy_python
      displayName: Deploy Python Packages
      dependsOn: []
      variables:
        - group: deployment-information
      steps:
        - checkout: none
        - download: current
          artifact: working
        - script: |
            set -xv  # Echo commands before they are run
            sudo env "PATH=$PATH" python -m pip install --no-cache-dir -U 'urllib3<2' twine
            ls dist
            twine upload --skip-existing dist/*
          workingDirectory: $(Pipeline.Workspace)/working/
          displayName: Deploy to PyPI
          env:
            TWINE_USERNAME: $(twineUsername)
            TWINE_PASSWORD: $(twinePassword)
    - job: deploy_containers
      displayName: Deploy Docker Image
      dependsOn: []
      strategy:
        matrix:
          Base:
            CONTAINER_NAME: assemblyline
          Core:
            CONTAINER_NAME: assemblyline-core
          UI:
            CONTAINER_NAME: assemblyline-ui
          UI-plugin-lookup-assemblyline:
            CONTAINER_NAME: assemblyline-ui-plugin-lookup-assemblyline
          UI-plugin-lookup-malwarebazaar:
            CONTAINER_NAME: assemblyline-ui-plugin-lookup-malwarebazaar
          UI-plugin-lookup-virustotal:
            CONTAINER_NAME: assemblyline-ui-plugin-lookup-virustotal
          UI-frontend:
            CONTAINER_NAME: assemblyline-ui-frontend
          SocketIO:
            CONTAINER_NAME: assemblyline-socketio
          Service-Server:
            CONTAINER_NAME: assemblyline-service-server
          Service-Base:
            CONTAINER_NAME: assemblyline-v4-service-base
          Sample-Service:
            CONTAINER_NAME: assemblyline-service-resultsample
      steps:
        - checkout: none
        - task: Docker@2
          displayName: Login to docker hub
          inputs:
            command: login
            containerRegistry: dockerhub
        - task: Docker@2
          displayName: Login to github packages
          inputs:
            command: login
            containerRegistry: github-packages-sa
        - task: Docker@2
          displayName: Login to temp registry
          inputs:
            command: login
            containerRegistry: cccstemp
        - task: Docker@2
          displayName: Login to chimera
          inputs:
            command: login
            containerRegistry: CHIMERA-U-ACR
        - script: |
            set -xv  # Echo commands before they are run
            export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
            if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
            export VERSION=${TAG/stable}
            export VERSION=${VERSION/beta/b}
            export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

            export BUILT_AS=cccstemp.azurecr.io/${CONTAINER_NAME}:$TAG
            docker pull $BUILT_AS

            for IMAGE in "cccs/" "docker.pkg.github.com/cybercentrecanada/assemblyline/" "uchimera.azurecr.io/cccs/"
            do
              docker tag $BUILT_AS ${IMAGE}${CONTAINER_NAME}:$TAG
              docker tag $BUILT_AS ${IMAGE}${CONTAINER_NAME}:$BUILD_TYPE
              docker tag $BUILT_AS ${IMAGE}${CONTAINER_NAME}:$SERIES
              docker push ${IMAGE}${CONTAINER_NAME} --all-tags
            done
          displayName: Deploy base Docker Hub
    - job: update_odm_docs
      displayName: "Update Assemblyline4 Documentation"
      steps:
        - download: current
          artifact: working
        - checkout: DocsRepo
          path: assemblyline4_docs
          persistCredentials: true
        - task: Docker@2
          displayName: Login to temp registry
          inputs:
            command: login
            containerRegistry: cccstemp
        - script: |
            set -xv  # Echo commands before they are run
            export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}

            # Prepare output directory
            cp -rf $(Agent.BuildDirectory)/assemblyline4_docs .
            (cd assemblyline4_docs && git checkout master)
            chmod -R a+rw ./assemblyline4_docs

            # Generate documentation from script
            docker run -v $PWD/assemblyline4_docs:/tmp/assemblyline4_docs:rw \
                       -v $PWD/assemblyline-base:/tmp/assemblyline-base:ro \
                       -v $PWD/gen_docs.py:/tmp/gen_docs.py:ro \
                       -w /tmp \
                       cccstemp.azurecr.io/assemblyline:${TAG} \
                       /bin/bash -c 'pip install mkdocs-material==7.3.6 mkdocs-static-i18n && python gen_docs.py . "/assemblyline4_docs"'
            if [[ "$TAG" == *stable* ]]
            then
              # Commit documentation changes (if any) to Documentation repo
              cd assemblyline4_docs
              if [[ `git status --porcelain` ]]; then
                git add .
                git config --global user.email "assemblyline@cyber.gc.ca"
                git config --global user.name "Azure Pipeline"
                git commit -m "Pipeline: Release $TAG documentation"
                git push
              fi
            fi

          workingDirectory: $(Pipeline.Workspace)/working/
          displayName: "Run script to generate documentation and commit changes"
